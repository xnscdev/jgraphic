import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'c'
}

group 'com.github.xnscdev'
version '0.0.1'

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    api "org.joml:joml:${jomlVersion}"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "de.articdive:jnoise-pipeline:4.0.0"
    implementation 'com.github.ramanrajarathinam:native-utils:1.0.0'
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        jtext(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def javaHome = Jvm.current().javaHome;
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${javaHome}/include"
                    cCompiler.args '-I', "${javaHome}/include/darwin"
                    linker.args '-framework', 'OpenGL'
                }
                else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${javaHome}/include"
                    cCompiler.args '-I', "${javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                    linker.args '-lGL'
                }
                else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${javaHome}/include"
                    cCompiler.args "-I${javaHome}/include/win32"
                    linker.args '-lGL'
                }
                else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${javaHome}/include"
                    cCompiler.args '-I', "${javaHome}/include/freebsd"
                    linker.args '-lGL'
                }
                def cflags = new ByteArrayOutputStream()
                exec {
                    commandLine 'pkg-config', '--cflags', 'glfw3', 'pangocairo'
                    standardOutput = cflags;
                }
                cCompiler.args "${cflags}".split()
                def libs = new ByteArrayOutputStream()
                exec {
                    commandLine 'pkg-config', '--libs', 'glfw3', 'pangocairo'
                    standardOutput = libs
                }
                linker.args "${libs}".split()
            }
        }
    }
}

classes.dependsOn 'jtextSharedLibrary'

jar {
    from "${buildDir}/libs/jtext/shared"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}